package {	import flash.display.MovieClip;	import flash.net.XMLSocket;	public class Osc extends MovieClip	{		public function Osc()		{		}		// *** create a new socket and attempts to connect to the server		function connect()		{			mySocket = new XMLSocket();			mySocket.onConnect = handleConnect;			mySocket.onClose = handleClose;			mySocket.onXML = handleIncoming;			if (! mySocket.connect(IPaddress,port))			{				//gotoAndStop("connectionFailed");				trace("connection failed");			}		}		// *** disconnect from the server		function disconnect()		{			mySocket.close();			mySocket.connected = false;			trace("disconnectd");			//gotoAndStop(2);		}		// *** event handler for incoming XML-encoded OSC packets		function handleIncoming(xmlIn)		{			// USEFUL DEBUG - display the raw xml data in the output window			// incoming += xmlIn.toString() +"\n";			// parse out the packet information			e = xmlIn.firstChild;			if (e != null && e.nodeName == "OSCPACKET")			{				packet = new OSCPacket(e.attributes.address, e.attributes.port,				e.attributes.time, xmlIn);				displayPacketHeaders(packet);				parseMessages(xmlIn);			}		}		// *** event handler to respond to successful connection attempt		function handleConnect(succeeded)		{			if (succeeded)			{				trace("Connected to " + IPaddress + " on port " + port + "\n");				//incoming += "Connected to " + IPaddress + " on port " + port + "\n";				mySocket.connected = true;			}			else			{				mySocket.connected = false;			}			//gotoAndPlay("connecting");			trace("connecting");		}		// *** event handler called when server kills the connection		function handleClose()		{			//incoming += ("The server at " + IPaddress + " has terminated the connection.\n");			trace("The server at " + IPaddress + " has terminated the connection.\n");			incomingUpdated = true;			mySocket.connected = false;			numClients = 0;		}		// *** OSCPacket constructor / class definition		function OSCPacket(address, port, time, xmlData)		{			this.address = address;			this.port = port;			this.time = time;			this.xmlData = xmlData;		}		// *** parse the messages from some XML-encoded OSC packet		//		//     THIS IS WHERE YOU COULD DO SOMETHING COOL		//     (probably based on the value of the arguments)		function parseMessages(node)		{			if (node.nodeName == "MESSAGE")			{				//incoming += "Message name: " + node.attributes.NAME + "\n";				trace("Message name: " + node.attributes.NAME + "\n");				// loop over the arguments of the message				for (var child = node.firstChild; child != null; child=child.nextSibling)				{					if (child.nodeName == "ARGUMENT")					{						//incoming += "\tArg type " + child.attributes.TYPE;						//incoming += ", value " + child.attributes.VALUE + "\n";						trace("\tArg type " + child.attributes.TYPE);						trace(", value " + child.attributes.VALUE + "\n");					}				}			}			else			{// look recursively for a message node				for (var child = node.firstChild; child != null; child=child.nextSibling)				{					parseMessages(child);				}			}		}		// *** build and send XML-encoded OSC		//		//THIS IS ANOTHER PLACE TO DO SOMETHING COOL		function sendOSC(name, arg, destAddr, destPort)		{			xmlOut = new XML();			osc = xmlOut.createElement("OSCPACKET");			osc.attributes.TIME = 0;			osc.attributes.PORT = destPort;			osc.attributes.ADDRESS = destAddr;			message = xmlOut.createElement("MESSAGE");			message.attributes.NAME = name;			argument = xmlOut.createElement("ARGUMENT");			// NOTE : the server expects all strings to be encoded			// with the escape function.			argument.attributes.VALUE = escape(arg);			argument.attributes.TYPE = "s";			// NOTE : to send more than one argument, just create			// more elements and appendChild them to the message.			// the same goes for multiple messages in a packet.			message.appendChild(argument);			osc.appendChild(message);			xmlOut.appendChild(osc);			if (mySocket && mySocket.connected)			{				mySocket.send(xmlOut);				/*incoming += "Sent XML-encoded OSC destined for "				+ destAddr				+ ", port "				+ destPort				+ "\n";*/				trace("Sent XML-encoded OSC destined for "				+ destAddr				+ ", port "				+ destPort				+ "\n");			}			incomingUpdated = true;		}	}}