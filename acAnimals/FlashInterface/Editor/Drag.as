package {	import flash.display.MovieClip;	import flash.events.MouseEvent;	import flash.geom.Point;	import flash.geom.ColorTransform;	import flash.events.Event;	import fl.transitions.Rotate;	public class Drag extends MovieClip	{ 				protected var originalPosition:Point;		var newCol:ColorTransform = new ColorTransform();		var auswahlEvent = new Event("type");		var startDragX:Number = 0;		var startDragY:Number = 0;		var rotateImg:RotateImg = new RotateImg();		var ausgewaehlt:Boolean=false;		public function Drag()		{			originalPosition = new Point(x,y);			rotateImg.mouseEnabled = false;			rotateImg.mouseChildren = false;			rotateImg.alpha = 0;			addChild(rotateImg);			buttonMode = true;			addEventListener(MouseEvent.MOUSE_OVER, changeColor);			addEventListener(MouseEvent.MOUSE_OUT, oldColor);			addEventListener(MouseEvent.MOUSE_DOWN, down );		}		function changeColor(myEvent:MouseEvent)		{			var startColor:ColorTransform = new ColorTransform();// default color, no tint			startColor.color = 0x75C2E6;			this.transform.colorTransform = startColor;//new ColorTransform(0,0,0,1,255,0,0,0);		}		function oldColor(myEvent:MouseEvent)		{			var endColor:ColorTransform = new ColorTransform();// default color, no tint			endColor.color = 0x686857;			this.transform.colorTransform = endColor;//new ColorTransform(0,0,0,1,255,0,0,0);		}		protected function down( event:MouseEvent ):void		{			parent.addChild( this );			var al:Array = (parent as Main).auswahlListe._collection;			startDragX=this.x;			startDragY=this.y;			startDrag();			stage.addEventListener( MouseEvent.MOUSE_UP, stageUp );		}		protected function stageUp(event:MouseEvent ):void		{						stage.removeEventListener(MouseEvent.MOUSE_UP, stageUp );			stopDrag();						if (dropTarget)			{				//dropTarget.parent.name == "Auswahl" 				if (this.hitTestObject(parent.getChildByName("Auswahl")))				{					if(ausgewaehlt){						if(this.x==startDragX && this.y==startDragY){							this.rotation +=  90;						}					}					this.dispatchEvent(new AuswahlEvent(AuswahlEvent.ON_AUSWAHL_HIT,{}));					if(!ausgewaehlt){						this.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT));					}//					dispatchEvent(auswahlEvent);					ausgewaehlt = true;					removeEventListener(MouseEvent.MOUSE_OVER, changeColor);					removeEventListener(MouseEvent.MOUSE_OUT, oldColor);					addEventListener(MouseEvent.MOUSE_OVER, showRotate);					addEventListener(MouseEvent.MOUSE_OUT, hideRotate);				}				else				{					returnToOriginalPosition();				}			}			else			{				returnToOriginalPosition();			}									var al:Array = (parent as Main).augenListe._collection;			if(al.length>0){				for (var i:Number=0; i<al.length; i++){					var t:MovieClip = (al[i] as MovieClip);					parent.setChildIndex(parent.getChildByName(t.name), parent.numChildren-1);				}			}			}				public function showRotate(e:MouseEvent):void{			this.transform.colorTransform = new ColorTransform();			this.setChildIndex(rotateImg, this.numChildren-1);			rotateImg.alpha=1;			}					public function hideRotate(e:MouseEvent):void{			rotateImg.alpha=0;			}				public function returnToOriginalPosition():void		{			ausgewaehlt = false;			this.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT));			removeEventListener(MouseEvent.MOUSE_OVER, showRotate);			removeEventListener(MouseEvent.MOUSE_OUT, hideRotate);			addEventListener(MouseEvent.MOUSE_OVER, changeColor);			addEventListener(MouseEvent.MOUSE_OUT, oldColor);			this.rotation =  0;			this.dispatchEvent(new AuswahlEvent(AuswahlEvent.ON_AUSWAHL_REMOVE,{}));			dispatchEvent(auswahlEvent);			x = originalPosition.x;			y = originalPosition.y;		}		public function removeRotateListener(){			rotateImg.visible = false;			removeEventListener(MouseEvent.MOUSE_OVER, showRotate);			removeEventListener(MouseEvent.MOUSE_OUT, hideRotate);		}				public function addRotateListener(){			rotateImg.visible = true;			addEventListener(MouseEvent.MOUSE_OVER, showRotate);			addEventListener(MouseEvent.MOUSE_OUT, hideRotate);		}	}   }